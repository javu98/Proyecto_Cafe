import streamlit as st
import pandas as pd
import joblib
import numpy as np

# Cargar el modelo y el codificador
rf_model = joblib.load('src/rf_model.pkl')
encoder = joblib.load('src/encoder.pkl')

# T√≠tulo principal y descripci√≥n del proyecto
st.title("üåü Predicci√≥n de Calificaci√≥n de Caf√© üåü")
st.markdown("""
¬°Bienvenido a nuestra aplicaci√≥n de predicci√≥n de calificaciones para caf√©s! ‚òï  

### Descripci√≥n del proyecto:
Esta herramienta interactiva utiliza un conjunto de datos que organiza rese√±as globales de caf√© recopiladas entre **2017 y 2022**, basado en factores como:
- **Nombre de la mezcla**
- **Tipo de tueste**
- **Precio por 100 gramos**
- **Origen geogr√°fico de los granos de caf√©**

Nuestro objetivo es predecir la **calificaci√≥n promedio** que un caf√© recibir√≠a, seg√∫n las caracter√≠sticas seleccionadas. Para ello, usamos un modelo de **Random Forest**, entrenado con datos reales para garantizar precisi√≥n en las predicciones. 

### ¬øC√≥mo funciona?
1. Selecciona las caracter√≠sticas de tu caf√© (tueste, precio, origen, etc.).
2. Haz clic en el bot√≥n **"Predecir"**.
3. Obtendr√°s la calificaci√≥n predicha en una escala de 0 a 100.  

Esta aplicaci√≥n combina an√°lisis de datos y aprendizaje autom√°tico para ayudarte a entender qu√© hace que un caf√© sea altamente valorado. ¬°Disfruta explorando! üåé‚òï  
""")

# Divider (l√≠nea para dividir secciones)
st.markdown("---")

# Entrada de usuario
st.subheader("Selecciona las caracter√≠sticas del caf√©")
roast = st.selectbox("Selecciona el tueste:", ["Light", "Medium", "Medium-Dark", "Dark", "Unknown"])
price = st.slider("Precio por 100g (USD):", min_value=0.1, max_value=50.0, step=0.1)
country = st.selectbox("Pa√≠s del tostador:", ["United States", "Ethiopia", "Colombia", "Unknown"])
origin = st.selectbox("Origen del caf√©:", ["Africa", "Asia", "South America", "Unknown"])

# Divider
st.markdown("---")

# Predicci√≥n
st.subheader("Resultado de la predicci√≥n")
if st.button("Predecir"):
    # Crear el DataFrame con los valores ingresados
    input_data = pd.DataFrame([[roast, price, country, origin]], columns=['roast', '100g_USD', 'loc_country', 'origin_1'])
    
    # Transformar las caracter√≠sticas categ√≥ricas usando el codificador
    input_encoded = encoder.transform(input_data[['roast', 'loc_country', 'origin_1']])
    input_encoded_df = pd.DataFrame(input_encoded, columns=encoder.get_feature_names_out(['roast', 'loc_country', 'origin_1']))

    # Concatenar las columnas codificadas con la caracter√≠stica num√©rica
    final_input = pd.concat([input_encoded_df, input_data[['100g_USD']].reset_index(drop=True)], axis=1)

    # Realizar la predicci√≥n
    prediction = rf_model.predict(final_input)
    st.success(f"La calificaci√≥n predicha para este caf√© es: **{prediction[0]:.2f}**")

